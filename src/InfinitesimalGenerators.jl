module InfinitesimalGenerators
using LinearAlgebra, KrylovKit

include("operators.jl")
include("feynman_kac.jl")

#========================================================================================

For a Markov Process x:
dx = Œºx dt + œÉx dZ_t

========================================================================================#

# Compute generator ùî∏f = E[df(x)]
function generator(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T}) where {T <: Number}
    operator(x, zeros(length(x)), Œºx, 0.5 * œÉx.^2)
end

# Stationary Distribution of x
function stationary_distribution(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T}) where {T <: Number}
    g, Œ∑, _ = principal_eigenvalue(generator(x, Œºx, œÉx); eigenvector = :left)
    abs(Œ∑) >= 1e-5 && @warn "Principal Eigenvalue does not seem to be zero"
    return g
end

# Stationary Distribution of x with death rate Œ¥ and reinjection œà
function stationary_distribution(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T}, Œ¥::T, œà::AbstractVector{T}) where {T <: Number}
    clean_eigenvector_left((Œ¥ * I - adjoint(generator(x, Œºx, œÉx))) \ (Œ¥ * œà))
end

# Compute u(x_t, t) = E[‚à´t^T e^{-‚à´ts V(x_œÑ, œÑ)dœÑ}f(x_s, s)ds + e^{-‚à´tT V(x_œÑ, œÑ)dœÑ}œà(x_T)|x_t = x]
function feynman_kac_backward(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T}; kwargs...) where {T <: Number}
    feynman_kac_backward(generator(x, Œºx, œÉx); kwargs...)
end

# Compute u(x, t)= E[‚à´0^t e^{-‚à´0^s V(x_œÑ)dœÑ}f(x_s)ds + e^{-‚à´0^tV(x_œÑ)dœÑ} œà(x_t)|x_0 = x]
function feynman_kac_forward(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T}; kwargs...) where {T <: Number}
    feynman_kac_forward(generator(x, Œºx, œÉx); kwargs...)
end

#========================================================================================

For a Markov Process x:
dx = Œºx dt + œÉx dZt
and a multiplicative functional M:
dM/M = ŒºM dt + œÉM dZt

========================================================================================#

# Compute generator ùî∏f = E[d(Mf(x))]
function generator(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T}, ŒºM::AbstractVector{T}, œÉM::AbstractVector{T}; symmetrize = false) where {T <: Number}
    ùî∏ = operator(x, ŒºM, œÉM .* œÉx .+ Œºx, 0.5 * œÉx.^2)
    if symmetrize
        g = stationary_distribution(x, Œºx, œÉx)
        ùî∏ = Symmetric(Diagonal(sqrt.(g))' * ùî∏ * Diagonal(1 ./ sqrt.(g)))
    end
    return ùî∏
end

# Compute Hansen Scheinkmann decomposition M_t= e^{Œ∑t}f(x_t)W_t
function hansen_scheinkman(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T}, ŒºM::AbstractVector{T}, œÉM::AbstractVector{T}; symmetrize = false) where {T <: Number}
    principal_eigenvalue(generator(x, Œºx, œÉx, ŒºM, œÉM; symmetrize = symmetrize); eigenvector = :right)[2:3]
end

# Compute E[M_t œà(x_t)|x_0 = x]
function feynman_kac_forward(x::AbstractVector{T}, Œºx::AbstractVector{T}, œÉx::AbstractVector{T},  ŒºM::AbstractVector{T}, œÉM::AbstractVector{T}; kwargs...) where {T <: Number}
    feynman_kac_forward(generator(x, Œºx, œÉx, ŒºM, œÉM); kwargs...)
end

# Compute tail index of the process M given by
# dM/M = Œº dt + œÉ dW_t
# with death rate Œ¥
function tail_index(Œº::Number, œÉ::Number, Œ¥::Number = 0)
    if œÉ > 0
        (1 - 2 * Œº / œÉ^2 + sqrt((1- 2 * Œº / œÉ^2)^2 + 8 * Œ¥ / œÉ^2)) / 2
    else
        Œ¥ / Œº
    end
end



# Compute tail index of the process M given by
# dM/M = ŒºM(x) dt + ŒΩM(x) dW_t
# dx = Œº(x) dt + œÉ(x) dW_t
# with death rate Œ¥
function tail_index(x::Vector{T}, Œºx::Vector{T}, œÉx::Vector{T}, ŒºM::Vector{T}, œÉM::Vector{T}, Œ¥ = 0.0) where {T <: Number}
    Œ∂ = find_zero(Œæ -> hansen_scheinkman(x, Œºx, œÉx, Œæ .* ŒºM .+ 0.5 * Œæ * (Œæ - 1) .* œÉM.^2 .- Œ¥, Œæ .* œÉM)[1], (1e-6, 10.0))
    out = hansen_scheinkman(x, Œºx, œÉx, Œ∂ .* ŒºM .+ 0.5 * Œ∂ * (Œ∂ - 1) .* œÉM.^2, Œ∂ .* œÉM)
    (abs(out) > 1e-3) && @warn "could not find zero power law"
    return Œ∂
end


##############################################################################
##
## Exported methods and types 
##
##############################################################################

export 
generator,
principal_eigenvalue,
feynman_kac_backward,
feynman_kac_forward,
stationary_distribution,
hansen_scheinkman,
tail_index
end