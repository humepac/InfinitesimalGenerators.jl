
##############################################################################
##
## Markov Process
##
## must define generator!(x)
## which corresponds to ùî∏f = E[df]
##
##############################################################################

abstract type MarkovProcess end
# must define generator!

function generator(x::MarkovProcess)
    deepcopy(generator!(x))
end

function stationary_distribution(x::MarkovProcess)
    g, Œ∑, _ = principal_eigenvalue(generator!(x); which = :SM, eigenvector = :left)
    abs(Œ∑) <= 1e-5 || @warn "Principal Eigenvalue does not seem to be zero"
    return g
end

# Death rate Œ¥ and reinjection œà
function stationary_distribution(x::MarkovProcess, Œ¥::Number, œà::AbstractVector{<:Number})
    clean_eigenvector_left((Œ¥ * I - generator!(x)') \ (Œ¥ * œà))
end

"""
If direction = :backward
compute `u(x, t) = E[‚à´t^T e^{-‚à´ts V(x_œÑ, œÑ)dœÑ}f(x_s, s)ds + e^{-‚à´tT V(x_œÑ, œÑ)dœÑ}œà(x_T)|x_t = x]`
If direction = :forward
compute `u(x, t)= E[‚à´0^t e^{-‚à´0^s V(x_œÑ)dœÑ}f(x_s)ds + e^{-‚à´0^tV(x_œÑ)dœÑ}œà(x_t)|x_0 = x]`
"""
function feynman_kac(x::MarkovProcess; kwargs...)
    feynman_kac(generator!(x); kwargs...)
end

##############################################################################
##
## Multiplicative Functional
##
## must define generator!(M, Œæ::Real)
## which corresponds to ùî∏f = E[d(M^Œæf)]
## Must also define length
##############################################################################


abstract type MultiplicativeFunctional end
 
function generator(M::MultiplicativeFunctional, Œæ = 1.0)
    deepcopy(generator!(M, Œæ))
end

# Œæ -> lim log(E[M^\xi]) / t
function cgf_longrun(M::MultiplicativeFunctional; which = :LR, eigenvector = :right, r0 = Ones(length(M)))
    Œæ -> principal_eigenvalue(generator!(M, Œæ); which = which, eigenvector = eigenvector, r0 = r0)
end

# Compute Hansen Scheinkmann decomposition M_t= e^{Œ∑t}f(x_t)\hat{M}_t
function hansen_scheinkman(M::MultiplicativeFunctional; which = :LR, eigenvector = :right)
    cgf_longrun(M, eigenvector = eigenvector)(1.0)
end

# Compute tail index of the process M given by
# dM/M = Œº dt + œÉ dW_t
# with death rate Œ¥
function tail_index(Œº::Number, œÉ::Number; Œ¥::Number = 0)
    if œÉ > 0
        (1 - 2 * Œº / œÉ^2 + sqrt((1- 2 * Œº / œÉ^2)^2 + 8 * Œ¥ / œÉ^2)) / 2
    else
        Œ¥ / Œº
    end
end

# Compute tail index of the process M given by
# dM/M = ŒºM(x) dt + œÉM(x) dZt
# dx = Œºx dt + œÉx dZt
# with death rate Œ¥
function tail_index(M::MultiplicativeFunctional; which = :SM, xatol = 1e-2, verbose = false, r0 = ones(length(M)), kwargs...)
    out = 0.0
    if which == :SM
        try
            # SM is so much faster. So try if it works.
            f = Œæ -> begin
                out = cgf_longrun(M; which = :SM, r0 = r0)(Œæ)
                eltype(out[3]) <: Float64 && copyto!(r0, out[3])
                verbose && @show (:SM, Œæ, out[2])
                return out[2]
            end
            D = Œæ -> DiffEqDiffTools.finite_difference_derivative(f, Œæ)
            out = find_zero((f, D), 1.0, Roots.Newton(); xatol = xatol, kwargs...)
            out2 = cgf_longrun(M; which = :LR, r0 = r0)(out)[2]
            if abs(out2) > 1e-2 
                @warn "Algorithm looking for SM eigenvalue = 0 converged to Œ∂ = $out. However, the :LR eigenvalue for this Œ∂ is  $out2"
                throw("there is an error")
            end
        catch
            which = :LR
        end
    end
    if which == :LR
        f = Œæ -> begin
            out = cgf_longrun(M; which = :LR, r0 = r0)(Œæ)
            eltype(out[3]) <: Float64 && copyto!(r0, out[3])
            verbose && @show (:LR, Œæ, out[2])
            return out[2]
        end
        D = Œæ -> DiffEqDiffTools.finite_difference_derivative(f, Œæ)
        try
            out = find_zero((f, D), 1.0, Roots.Newton(); xatol = xatol, kwargs...)
        catch
            out = find_zero((f, D), (1e-2, 10.0); xatol = xatol, kwargs...)
        end
    end
    return out
end

""" 
If direction = :forward
compute `E[M_t œà(x_t)|x_0 = x]`
"""
function feynman_kac(M::MultiplicativeFunctional; kwargs...)
    feynman_kac(generator!(M); kwargs...)
end
